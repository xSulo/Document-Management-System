services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: dms
      POSTGRES_PASSWORD: dmsPW
      POSTGRES_DB: dmsdb
    ports: ["5432:5432"]
    volumes: [pgdata:/var/lib/postgresql/data]

  rabbit:
    image: rabbitmq:3.13-management
    ports:
        - "5672:5672"     
        - "15672:15672"
    environment:
        RABBITMQ_DEFAULT_USER: dev
        RABBITMQ_DEFAULT_PASS: dev
    healthcheck:
        test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
        interval: 10s
        timeout: 5s
        retries: 10

  api:
    build: ./dms
    ports: ["8080:8080"]
    environment:
      ASPNETCORE_URLS: http://+:8080
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__Postgres: Host=db;Port=5432;Database=dmsdb;Username=dms;Password=dmsPW
      RabbitMq__HostName: rabbit
      RabbitMq__Port: 5672
      RabbitMq__UserName: dev
      RabbitMq__Password: dev
      RabbitMq__Exchange: dms.exchange
      RabbitMq__Queue: dms.ocr
      RabbitMq__RoutingKey: ocr.new
      Storage__UploadsRoot: /app/storage/uploads
    volumes:
      - ./storage/uploads:/app/storage/uploads
    depends_on:
        - db
        - rabbit

  ocrworker:
    build: ./dms.Ocr.Worker
    environment:
        RabbitMq__HostName: rabbit
        RabbitMq__Port: 5672
        RabbitMq__UserName: dev
        RabbitMq__Password: dev
        RabbitMq__Exchange: dms.exchange
        RabbitMq__Queue: dms.ocr
        RabbitMq__RoutingKey: ocr.new
    depends_on:
        rabbit:
            condition: service_healthy
    restart: unless-stopped

  ui:
    build:
        context: .
        dockerfile: ./webserver/Dockerfile
    container_name: dms_ui
    ports:
        - "8081:80"
    depends_on:
        - api


volumes:
  pgdata:
